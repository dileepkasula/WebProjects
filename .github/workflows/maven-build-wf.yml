# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    - name: Build and Push Docker Image
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: s713278/test-d-120824
        tags: v1, latest
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWD }}
    #Deploy the pushed image on Linode Server
    - name: Set up SSH keys
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.LINODE_SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    #- name: Login to Docker registry
    #  run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    #- name: Build and push Docker image
    #  run: |
    #    docker build -t ${{ secrets.DOCKER_USERNAME }}/test-d-120824:latest .
    #    docker push ${{ secrets.DOCKER_USERNAME }}/test-d-120824:latest

    - name: SSH into Linode server and deploy
      run: |
        ssh -o StrictHostKeyChecking=no root@172.105.33.153
        docker pull ${{ secrets.DOCKER_USERNAME }}/test-d-120824:latest
        docker stop reactive-test-container || true
        docker rm reactive-test-container || true
        docker run -d -p 8089:8089 --name reactive-test-container ${{ secrets.DOCKER_USERNAME }}/test-d-120824:latest
        
